// slim_script.slim
// Derivative Creation Model - Ready for MyBinder
initialize() {
    initializeSLiMOptions(keepPedigrees=T);
    defineConstant("L", 1e6); defineConstant("L_Y", 1e5); defineConstant("L_MT", 1e5);
    initializeMutationType("m1", 0.5, "f", 0.0); // Neutral
    initializeMutationType("m2", 0.5, "f", 0.1); // Selected (FOXP2-like)
    initializeGenomicElementType("g1", c(m1, m2), c(0.99, 0.01));
    initializeGenomicElementType("gY", m1, 1.0); initializeGenomicElementType("gMT", m1, 1.0);
    initializeGenomicElement(g1, 0, L-1);
    initializeGenomicElement(gY, L, L + L_Y - 1);
    initializeGenomicElement(gMT, L + L_Y, L + L_Y + L_MT - 1);
    initializeRecombinationRate(c(1e-8, 0, 0), c(L-1, L + L_Y - 1, L + L_Y + L_MT - 1));
    initializeMutationRate(1e-8); gMT.setMutationRate(1e-7);
    initializeSex("A");
}

1 {
    sim.addSubpop("p1", 2);
    inds = p1.individuals;
    inds[0].setSex("M"); inds[1].setSex("F");
    catn("Started: Adam (M) + Eve (F)");
}

1:500 late() {
    size = asInteger(2 * exp(0.015 * sim.generation));
    if (size > 10000) size = 10000;
    p1.setSubpopulationSize(size);
}

100 late() {
    males = p1.individuals[p1.individuals.sex == "M"];
    if (males.size() > 10) {
        remove = sample(males, asInteger(0.7 * males.size()));
        p1.removeIndividuals(remove);
    }
    catn("Patrilineal skew at gen " + sim.generation);
}

200 late() {
    old_size = p1.individualCount;
    new_size = asInteger(old_size * 0.5);
    if (new_size > 10) {
        p2 = sim.addSubpopSplit("p2", new_size, p1);
        for (genome in p2.genomes) {
            if (genome.isNullGenome == F) {
                genome.addNewDrawnMutation(m1, rdunif(1, 0, L-1));
            }
        }
        catn("Wave of replacement: " + new_size + " new inds");
    }
}

300 late() {
    females = p1.individuals[p1.individuals.sex == "F"];
    target = sample(females, asInteger(max(1, 0.05 * females.size())));
    for (ind in target) {
        start = rdunif(1, 0, L-5000);
        for (i in 0:9) {
            pos = start + rdunif(1, 0, 4999);
            ind.genomes[0].addNewDrawnMutation(m1, pos);
        }
    }
    catn("X duplication in " + target.size() + " females");
}

8000 late() {
    catn("\n=== FINAL RESULTS ===");
    catn("Population: " + p1.individualCount);
    treeSeq = sim.treeSeqMetadata();
    y_coal = mean(sim.generation - sim.chromosomes[gY].mutations.individuals.genome.nodes.generation);
    mt_coal = mean(sim.generation - sim.chromosomes[gMT].mutations.individuals.genome.nodes.generation);
    catn("Y coalescence: ~" + asInteger(y_coal) + " gen (~" + asInteger(y_coal*25) + " years)");
    catn("mtDNA coalescence: ~" + asInteger(mt_coal) + " gen (~" + asInteger(mt_coal*25) + " years)");
    het_auto = p1.heterozygosity(g1);
    het_X_f = p1.heterozygosity(g1, sex="F");
    het_Y = p1.heterozygosity(gY, sex="M");
    catn("Het (Autosome/X): " + format("%.6f", het_auto));
    catn("Het (X females): " + format("%.6f", het_X_f));
    catn("Het (Y males): " + format("%.6f", het_Y));
    p1.genomes.outputVCF("output.vcf");
    sim.treeSeqOutput("trees.trees");
    catn("Saved: output.vcf, trees.trees");
    sim.simulationFinished();
}
